name: Packer Build

on:
  push:
    branches:
      - main

jobs:
  packer_build:
    runs-on: ubuntu-latest
    outputs:
      ami_id: ${{ steps.get_ami.outputs.ami_id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: '1.8.7'  

      - name: Initialize Packer
        run: packer init .

      - name: Run Packer build
        run: |
          packer build -machine-readable webapp.pkr.hcl | tee build.log

      - name: Get Latest AMI ID
        id: get_ami
        run: |
          AMI_ID=$(aws ec2 describe-images --filters "Name=name,Values=csye6225-webapp-*" --query 'sort_by(Images, &CreationDate)[-1].ImageId' --output text)
          echo "ami_id=${AMI_ID}" >> "$GITHUB_OUTPUT"

  update_asg:
    needs: packer_build
    runs-on: ubuntu-latest
    if: vars.AWS_PROFILE != 'none'
    steps:
      - name: Configure AWS credentials for Dev
        if: vars.AWS_PROFILE == 'dev'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
    
      - name: Configure AWS credentials for Demo
        if: vars.AWS_PROFILE == 'demo'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create new Launch Template version
        id: launch_template
        run: |
          TEMPLATE_ID=$(aws ec2 describe-launch-templates --filters "Name=tag:Environment,Values=${{vars.AWS_PROFILE}}" --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
          
          LATEST_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-id $TEMPLATE_ID --query 'sort_by(LaunchTemplateVersions, &VersionNumber)[-1].VersionNumber' --output text)
          
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id $TEMPLATE_ID \
            --source-version $LATEST_VERSION \
            --launch-template-data "{\"ImageId\":\"${{ needs.packer_build.outputs.ami_id }}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
          
          echo "template_id=${TEMPLATE_ID}" >> "$GITHUB_OUTPUT"
          echo "version=${NEW_VERSION}" >> "$GITHUB_OUTPUT"

          # Update ASG to use the new version
          ASG_NAME="${{ vars.AWS_PROFILE }}-app-asg"
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $ASG_NAME \
            --launch-template "LaunchTemplateId=$TEMPLATE_ID,Version=$NEW_VERSION"
  
      - name: Start ASG Instance Refresh
        id: refresh
        run: |
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[?contains(Tags[?Key==`Name`].Value, `${{ vars.AWS_PROFILE }}-webapp-asg-instance`)].[AutoScalingGroupName]' --output text)
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences "MinHealthyPercentage=90" \
            --query 'InstanceRefreshId' \
            --output text)
          
          echo "refresh_id=${REFRESH_ID}" >> "$GITHUB_OUTPUT"
          
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name $ASG_NAME \
              --instance-refresh-ids $REFRESH_ID \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
            
            if [ "$STATUS" = "Successful" ]; then
              echo "Instance refresh completed successfully"
              exit 0
            elif [ "$STATUS" = "Failed" ]; then
              echo "Instance refresh failed"
              exit 1
            elif [ "$STATUS" = "Cancelled" ]; then
              echo "Instance refresh was cancelled"
              exit 1
            fi
            
            echo "Instance refresh status: $STATUS. Waiting..."
            sleep 30
          done